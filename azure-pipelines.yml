trigger:
  branches:
    include:
      - main

variables:
  vmImageName: 'windows-latest'
  buildVersion: '1.0.$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build stage
  variables:
  - group: SMD-Test-Variables  # Include Test variables here
  - group: SMD-Prod-Variables  # Include Prod variables here
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - task: PowerShell@2
      displayName: 'Create npm cache directory'
      inputs:
        targetType: 'inline'
        script: |
          New-Item -ItemType Directory -Force -Path "$(Pipeline.Workspace)/.npm"

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        path: '$(Pipeline.Workspace)/.npm'
      displayName: 'Cache npm packages'

    - task: Npm@1
      displayName: 'npm install'
      inputs:
        command: 'install'

    # Clean dist directory before build
    - task: DeleteFiles@1
      displayName: 'Clean dist directory'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/dist'
        Contents: '**/*'

    # Replace tokens in environment files using variables from groups
    - task: replacetokens@5
      displayName: 'Replace Tokens in Test Environment'
      inputs:
        targetFiles: 'src/environments/environment.test.ts'
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        tokens: |
          BUILD_VERSION=$(buildVersion)
          API_URL=$(API_URL)      # From SMD-Test-Variables
          SIGNALR_URL=$(SIGNALR_URL)

    - task: replacetokens@5
      displayName: 'Replace Tokens in Production Environment'
      inputs:
        targetFiles: 'src/environments/environment.production.ts'
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        tokens: |
          BUILD_VERSION=$(buildVersion)
          API_URL=$(API_URL)      # From SMD-Prod-Variables
          SIGNALR_URL=$(SIGNALR_URL)

    # Build Test Version
    - task: Npm@1
      displayName: 'Build Test'
      inputs:
        command: 'custom'
        customCommand: 'run build -- --configuration=test'
      continueOnError: false

    - task: CopyFiles@2
      displayName: 'Copy Test Files to Artifact Staging'
      inputs:
        SourceFolder: 'dist/social-media-detox/browser'
        Contents: '**/*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/test'

    # Build Production Version
    - task: Npm@1
      displayName: 'Build Production'
      inputs:
        command: 'custom'
        customCommand: 'run build -- --configuration=production'
      continueOnError: false

    - task: CopyFiles@2
      displayName: 'Copy Production Files to Artifact Staging'
      inputs:
        SourceFolder: 'dist/social-media-detox/browser'
        Contents: '**/*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/prod'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: DeployTest
  displayName: Deploy to Test
  dependsOn: Build
  condition: succeeded()
  variables:
  - group: SMD-Test-Variables
  jobs:
  - deployment: Deploy
    displayName: Deploy to Test
    environment: 'test'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Stop Test App Service'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Stop Azure App Service'
              WebAppName: 'smd-web-test'

          # Add Archive step
          - task: ArchiveFiles@2
            displayName: 'Archive Test Files'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/drop/test'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Pipeline.Workspace)/drop/test.zip'
              replaceExistingArchive: true

          - task: AzureWebApp@1
            displayName: 'Deploy to Test App Service'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              appName: 'smd-web-test'
              package: '$(Pipeline.Workspace)/drop/test.zip'
              appType: 'webApp'

          - task: AzureAppServiceManage@0
            displayName: 'Start Test App Service'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Start Azure App Service'
              WebAppName: 'smd-web-test'

- stage: DeployProduction
  displayName: Deploy to Production
  dependsOn: DeployTest
  condition: succeeded()
  variables:
  - group: SMD-Prod-Variables
  jobs:
  - deployment: Deploy
    displayName: Deploy to Production
    environment: 'production'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Stop Production App Service'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Stop Azure App Service'
              WebAppName: 'smd-web-prod'

          # Add Archive step
          - task: ArchiveFiles@2
            displayName: 'Archive Production Files'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/drop/prod'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Pipeline.Workspace)/drop/prod.zip'
              replaceExistingArchive: true

          - task: AzureWebApp@1
            displayName: 'Deploy to Production App Service'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              appName: 'smd-web-prod'
              package: '$(Pipeline.Workspace)/drop/prod.zip'
              appType: 'webApp'

          - task: AzureAppServiceManage@0
            displayName: 'Start Production App Service'
            inputs:
              azureSubscription: 'SocialMediaDetoxConnection'
              Action: 'Start Azure App Service'
              WebAppName: 'smd-web-prod'
